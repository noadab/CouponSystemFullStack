{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { authActions } from '../store/auth';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst logout = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const isAuth = useSelector(state => state.auth.isAuthenticated);\n  const userType = useSelector(state => state.auth.userType);\n\n  const logoutHandler = () => {\n    dispatch(authActions.logout());\n  };\n\n  return \"\";\n};\n\n_s(logout, \"4cEL6FwBmad+SpXaI295LlsxHAM=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\nconst fetchWrapper = {\n  get: async name => getHandler(name),\n  fetch: async (method, name, dataToSend, onfail) => putHandler(method, name, dataToSend, onfail),\n  delete: async (method, name, token, onFail) => deleteHandler(method, name, token, onFail)\n}; // const logoutHandler = () => {\n//   dispatch(authActions.logout());\n// };\n\nconst OK = \"Ok\"; // Custome exception\n\nconst NOT_FOUND = \"Not found\"; // Other exceptions\n\nconst METHOD_NOT_ALLOWED = \"Method not allowed\"; // Session end\n\nconst BAD_REQUEST = \"Bad Request\";\n\nasync function getHandler(name) {\n  const response = await fetch(name);\n  console.log(response);\n\n  if (response.statusText === BAD_REQUEST) {\n    alert(await response.text());\n    logout(); // throw new Error(response.statusText);\n  } else if (!response.ok) {\n    throw new Error(await response.text());\n  }\n\n  const data = await response.json();\n  console.log(\"fetchWrapper got data, len=\" + Object.keys(data).length);\n  return data;\n}\n\n;\n\nasync function putHandler(method, name, dataToSend, token) {\n  let onFail = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : () => {};\n  const requestOptions = {\n    method: method,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      token: token\n    },\n    body: JSON.stringify(dataToSend)\n  };\n  const response = await fetch(name, requestOptions);\n\n  if (response.statusText === BAD_REQUEST) {\n    logout();\n    alert(await response.text());\n    throw new Error(await response.text());\n  } else if (!response.ok) {\n    alert(await response.text());\n    throw new Error(response.json());\n  }\n\n  alert(await response.text());\n  return;\n}\n\n;\n\nasync function deleteHandler(method, name, token) {\n  let onFail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : () => {};\n  const requestOptions = {\n    method: method,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      token: token\n    }\n  };\n  const response = await fetch(name, requestOptions);\n\n  if (response.statusText === BAD_REQUEST) {\n    logout();\n    alert(await response.text());\n    throw new Error(await response.text());\n  } else if (!response.ok) {\n    alert(await response.text());\n    throw new Error(await response.text());\n  }\n\n  alert(await response.text());\n  return;\n}\n\nexport default fetchWrapper;","map":{"version":3,"sources":["C:/Users/bar86/Documents/GitHub/CouponSystemFinal/CouponSystemSpring/src/main/react/src/helper/fetchWrapper.js"],"names":["authActions","useSelector","useDispatch","logout","dispatch","isAuth","state","auth","isAuthenticated","userType","logoutHandler","fetchWrapper","get","name","getHandler","fetch","method","dataToSend","onfail","putHandler","delete","token","onFail","deleteHandler","OK","NOT_FOUND","METHOD_NOT_ALLOWED","BAD_REQUEST","response","console","log","statusText","alert","text","ok","Error","data","json","Object","keys","length","requestOptions","headers","body","JSON","stringify"],"mappings":"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","sourcesContent":["import { authActions } from '../store/auth';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nconst logout = () => {\r\n  const dispatch = useDispatch();\r\n  const isAuth = useSelector((state) => state.auth.isAuthenticated);\r\n  const userType = useSelector(state => state.auth.userType);\r\n\r\n  const logoutHandler = () => {\r\n    dispatch(authActions.logout());\r\n  };\r\n  return (\"\")\r\n};\r\n\r\nconst fetchWrapper = {\r\n\r\n  get: async (name) => getHandler(name),\r\n  fetch: async (method, name, dataToSend, onfail) => putHandler(method, name, dataToSend, onfail),\r\n  delete: async (method, name, token, onFail) => deleteHandler(method, name, token, onFail)\r\n}\r\n\r\n\r\n\r\n// const logoutHandler = () => {\r\n//   dispatch(authActions.logout());\r\n// };\r\n\r\nconst OK = \"Ok\";\r\n// Custome exception\r\nconst NOT_FOUND = \"Not found\"\r\n// Other exceptions\r\nconst METHOD_NOT_ALLOWED = \"Method not allowed\"\r\n// Session end\r\nconst BAD_REQUEST = \"Bad Request\"\r\n\r\nasync function getHandler(name) {\r\n\r\n  const response = await fetch(name);\r\n  console.log(response)\r\n  if (response.statusText === BAD_REQUEST) {\r\n    alert(await response.text());\r\n    logout();\r\n    // throw new Error(response.statusText);\r\n  }\r\n  else if (!response.ok) {\r\n    throw new Error(await response.text());\r\n  }\r\n\r\n  const data = await response.json();\r\n  console.log(\"fetchWrapper got data, len=\" + Object.keys(data).length);\r\n  return data;\r\n\r\n};\r\n\r\nasync function putHandler(method, name, dataToSend, token, onFail = () => { }) {\r\n\r\n  const requestOptions = {\r\n    method: method,\r\n    headers: { \"Content-Type\": \"application/json\", token: token },\r\n    body: JSON.stringify(dataToSend)\r\n  };\r\n  const response = await fetch(name, requestOptions);\r\n  if (response.statusText === BAD_REQUEST) {\r\n    logout();\r\n    alert(await response.text());\r\n    throw new Error(await response.text());\r\n  }\r\n\r\n  else if (!response.ok) {\r\n    alert(await response.text())\r\n    throw new Error(response.json());\r\n  }\r\n\r\n  alert(await response.text());\r\n  return;\r\n\r\n};\r\n\r\nasync function deleteHandler(method, name, token, onFail = () => { }) {\r\n\r\n  const requestOptions = {\r\n    method: method,\r\n    headers: { \"Content-Type\": \"application/json\", token: token }\r\n  };\r\n  const response = await fetch(name, requestOptions);\r\n  if (response.statusText === BAD_REQUEST) {\r\n    logout();\r\n    alert(await response.text());\r\n    throw new Error(await response.text());\r\n  }\r\n\r\n  else if (!response.ok) {\r\n    alert(await response.text())\r\n    throw new Error(await response.text());\r\n  }\r\n  alert(await response.text());\r\n  return;\r\n\r\n}\r\n\r\n\r\nexport default fetchWrapper;"]},"metadata":{},"sourceType":"module"}