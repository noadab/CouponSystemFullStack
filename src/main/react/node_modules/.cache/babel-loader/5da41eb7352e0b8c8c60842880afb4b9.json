{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\noada\\\\eclipse-workspace\\\\CouponSystemSpring\\\\src\\\\main\\\\react\\\\src\\\\components\\\\Client\\\\ClientFetch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport fetchWrapper from '../../helper/fetchWrapper';\nimport ClientList from \"./ClientList\";\nimport ClientForm from \"./ClientForm\";\nimport classes from './ClientList.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ClientFetch = props => {\n  _s();\n\n  const userType = useSelector(state => state.auth.userType);\n  const token = useSelector(state => state.auth.token);\n  const [clients, setClients] = useState([]);\n  const [add, setAdd] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const requestClient = props.requestClient;\n  const fetchClientHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    const data = await fetchWrapper.get(\"/\" + userType + \"/\" + requestClient + \"/\" + token, () => {\n      console.log(error);\n      setError(error.message);\n    });\n    console.log(data);\n    const transformed = data.map(clientData => {\n      return {\n        clientType: requestClient == \"company\" ? \"company\" : \"customer\",\n        id: clientData.id,\n        name: requestClient == \"company\" ? clientData.name : \"\",\n        firstName: requestClient == \"company\" ? \"\" : clientData.firstName,\n        lastName: requestClient == \"company\" ? \"\" : clientData.lastName,\n        email: clientData.email,\n        password: clientData.password\n      };\n    });\n    console.log(transformed);\n    setClients(transformed);\n    setIsLoading(false);\n  });\n  useEffect(() => {\n    fetchClientHandler();\n  }, []);\n\n  let content = /*#__PURE__*/_jsxDEV(\"section\", {\n    children: \"Found no clients.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 19\n  }, this);\n\n  if (clients.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(ClientList, {\n      clients: clients,\n      clientType: requestClient\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 19\n    }, this);\n  }\n\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"section\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 19\n    }, this);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"section\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 19\n    }, this);\n  }\n\n  const addClientHandler = () => {\n    setAdd(true);\n  };\n\n  const onCancel = () => {\n    setAdd(false);\n  };\n\n  const onSave = props => {\n    setAdd(false);\n    fetchClientHandler();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ClientFetch, \"+6CbREPa/l/ixpsYQyX+9296Qeg=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = ClientFetch;\nexport default ClientFetch;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClientFetch\");","map":{"version":3,"sources":["C:/Users/noada/eclipse-workspace/CouponSystemSpring/src/main/react/src/components/Client/ClientFetch.js"],"names":["React","useCallback","useEffect","useState","useDispatch","useSelector","fetchWrapper","ClientList","ClientForm","classes","ClientFetch","props","userType","state","auth","token","clients","setClients","add","setAdd","isLoading","setIsLoading","error","setError","requestClient","fetchClientHandler","data","get","console","log","message","transformed","map","clientData","clientType","id","name","firstName","lastName","email","password","content","length","addClientHandler","onCancel","onSave"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport fetchWrapper from '../../helper/fetchWrapper'\r\nimport ClientList from \"./ClientList\";\r\nimport ClientForm from \"./ClientForm\";\r\nimport classes from './ClientList.module.css'\r\n\r\nconst ClientFetch = (props) => {\r\n    const userType = useSelector(state => state.auth.userType);\r\n    const token = useSelector(state => state.auth.token);\r\n\r\n    const [clients, setClients] = useState([]);\r\n    const [add,setAdd]= useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const requestClient = props.requestClient;\r\n\r\n    const fetchClientHandler = useCallback(async () => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        const data = await fetchWrapper.get(\"/\"+userType+\"/\" + requestClient + \"/\" + token, () => {\r\n            console.log(error)\r\n            setError(error.message);\r\n        });\r\n        console.log(data);\r\n        \r\n        const transformed = data.map((clientData) => {\r\n            return {\r\n            clientType: requestClient == \"company\" ? \"company\" : \"customer\",\r\n            id: clientData.id,\r\n            name: requestClient == \"company\" ? clientData.name : \"\",\r\n            firstName: requestClient == \"company\" ? \"\" : clientData.firstName,\r\n            lastName: requestClient == \"company\" ? \"\" : clientData.lastName,\r\n            email: clientData.email,\r\n            password: clientData.password\r\n        }\r\n    })\r\n        console.log(transformed)\r\n        setClients(transformed)\r\n        setIsLoading(false);\r\n    })\r\n    \r\n    useEffect(() => {\r\n        fetchClientHandler();\r\n    }, []);\r\n\r\n\r\n    let content = <section>Found no clients.</section>;\r\n    \r\n    if (clients.length > 0) {\r\n        content = <ClientList clients={clients} clientType={requestClient} />;\r\n    }\r\n\r\n    if (error) {\r\n        content = <section>{error}</section>;\r\n    }\r\n\r\n    if (isLoading) {\r\n        content = <section>Loading...</section>;\r\n    }\r\n\r\n\r\n    const addClientHandler=()=>{\r\n        setAdd(true);\r\n    }\r\n\r\n    const onCancel = () => {\r\n        setAdd(false);\r\n    }\r\n    const onSave = (props)=>{\r\n      setAdd(false); \r\n      fetchClientHandler();\r\n    }\r\n    return (\r\n        <div >\r\n            {content}\r\n          \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ClientFetch;"]},"metadata":{},"sourceType":"module"}