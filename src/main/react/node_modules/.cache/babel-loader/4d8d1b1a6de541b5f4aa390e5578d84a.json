{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\noada\\\\eclipse-workspace\\\\CouponSystemSpring\\\\src\\\\main\\\\react\\\\src\\\\components\\\\Client\\\\ClientFetch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport fetchWrapper from '../../helper/fetchWrapper';\nimport ClientList from \"./ClientList\";\nimport ClientForm from \"./ClientForm\";\nimport classes from './ClientList.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ClientFetch = props => {\n  _s();\n\n  const userType = useSelector(state => state.auth.userType);\n  const token = useSelector(state => state.auth.token);\n  const [clients, setClients] = useState([]);\n  const [add, setAdd] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const requestClient = props.requestClient;\n  const fetchClientHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const data = await fetchWrapper.get(\"/\" + userType + \"/\" + requestClient + \"/\" + token, () => {\n        setError(error.message);\n      });\n\n      if (userType === \"admin\") {\n        const transformed = data.map(clientData => {\n          return {\n            clientType: requestClient == \"company\" ? \"company\" : \"customer\",\n            id: clientData.id,\n            name: requestClient == \"company\" ? clientData.name : \"\",\n            firstName: requestClient == \"company\" ? \"\" : clientData.firstName,\n            lastName: requestClient == \"company\" ? \"\" : clientData.lastName,\n            email: clientData.email,\n            password: clientData.password\n          };\n        });\n      }\n\n      console.log(transformed);\n      setClients(transformed);\n    } catch (error) {\n      console.log(error.message);\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  });\n  useEffect(() => {\n    fetchClientHandler();\n  }, []);\n\n  let content = /*#__PURE__*/_jsxDEV(\"section\", {\n    children: \"Found no clients.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 19\n  }, this);\n\n  if (clients.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(ClientList, {\n      clients: clients,\n      clientType: requestClient\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 19\n    }, this);\n  }\n\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"section\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 19\n    }, this);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"section\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 19\n    }, this);\n  }\n\n  const addClientHandler = () => {\n    setAdd(true);\n  };\n\n  const onCancel = () => {\n    setAdd(false);\n  };\n\n  const onSave = props => {\n    setAdd(false);\n    fetchClientHandler();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!add && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addClientHandler,\n      children: \"Add client\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 22\n    }, this), add && /*#__PURE__*/_jsxDEV(ClientForm, {\n      defaultData: false,\n      requestClient: requestClient,\n      onCancel: onCancel,\n      onSave: onSave\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }, this), content]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ClientFetch, \"yZl/iMH5KteJjzrlPf+KT9iD89A=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = ClientFetch;\nexport default ClientFetch;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClientFetch\");","map":{"version":3,"sources":["C:/Users/noada/eclipse-workspace/CouponSystemSpring/src/main/react/src/components/Client/ClientFetch.js"],"names":["React","useCallback","useEffect","useState","useDispatch","useSelector","fetchWrapper","ClientList","ClientForm","classes","ClientFetch","props","userType","state","auth","token","clients","setClients","add","setAdd","isLoading","setIsLoading","error","setError","requestClient","fetchClientHandler","data","get","message","transformed","map","clientData","clientType","id","name","firstName","lastName","email","password","console","log","content","length","addClientHandler","onCancel","onSave"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport fetchWrapper from '../../helper/fetchWrapper'\r\nimport ClientList from \"./ClientList\";\r\nimport ClientForm from \"./ClientForm\";\r\nimport classes from './ClientList.module.css'\r\n\r\nconst ClientFetch = (props) => {\r\n    const userType = useSelector(state => state.auth.userType);\r\n    const token = useSelector(state => state.auth.token);\r\n\r\n    const [clients, setClients] = useState([]);\r\n    const [add, setAdd] = useState(false);\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const requestClient = props.requestClient;\r\n\r\n    const fetchClientHandler = useCallback(async () => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n            const data = await fetchWrapper.get(\"/\" + userType + \"/\" + requestClient + \"/\" + token, () => {\r\n                setError(error.message);\r\n            });\r\n\r\n            if (userType===\"admin\"){\r\n            const transformed = data.map((clientData) => {\r\n                return {\r\n                    clientType: requestClient == \"company\" ? \"company\" : \"customer\",\r\n                    id: clientData.id,\r\n                    name: requestClient == \"company\" ? clientData.name : \"\",\r\n                    firstName: requestClient == \"company\" ? \"\" : clientData.firstName,\r\n                    lastName: requestClient == \"company\" ? \"\" : clientData.lastName,\r\n                    email: clientData.email,\r\n                    password: clientData.password\r\n                }\r\n            })\r\n        }\r\n            console.log(transformed)\r\n            setClients(transformed)\r\n        } catch (error) {\r\n            console.log(error.message);\r\n            setError(error.message);\r\n        }\r\n        setIsLoading(false);\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        fetchClientHandler();\r\n    }, []);\r\n\r\n\r\n    let content = <section>Found no clients.</section>;\r\n\r\n    if (clients.length > 0) {\r\n        content = <ClientList clients={clients} clientType={requestClient} />;\r\n    }\r\n\r\n    if (error) {\r\n        content = <section>{error}</section>;\r\n    }\r\n\r\n    if (isLoading) {\r\n        content = <section>Loading...</section>;\r\n    }\r\n\r\n\r\n    const addClientHandler = () => {\r\n        setAdd(true);\r\n    }\r\n\r\n    const onCancel = () => {\r\n        setAdd(false);\r\n    }\r\n    const onSave = (props) => {\r\n        setAdd(false);\r\n        fetchClientHandler();\r\n    }\r\n    return (\r\n        <div >\r\n            {!add && <button onClick={addClientHandler}>Add client</button>}\r\n            {add && <ClientForm defaultData={false} requestClient={requestClient} onCancel={onCancel} onSave={onSave} />}\r\n            {content}\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ClientFetch;"]},"metadata":{},"sourceType":"module"}